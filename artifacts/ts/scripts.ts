/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  ExecutableScript,
  ExecuteScriptParams,
  ExecuteScriptResult,
  Script,
  SignerProvider,
  HexString,
} from "@alephium/web3";
import { getContractByCodeHash } from "./contracts";
import { default as BidMultipleChoiceScriptJson } from "../scripts/BidMultipleChoice.ral.json";
import { default as BoostBetScriptJson } from "../scripts/BoostBet.ral.json";
import { default as ClaimMultipleChoiceScriptJson } from "../scripts/ClaimMultipleChoice.ral.json";
import { default as DeployNewBetScriptJson } from "../scripts/DeployNewBet.ral.json";
import { default as DestroyBetScriptJson } from "../scripts/DestroyBet.ral.json";
import { default as EndBetScriptJson } from "../scripts/EndBet.ral.json";
import { DIAOracleValue, AllStructs } from "./types";

export const BidMultipleChoice = new ExecutableScript<{
  predict: HexString;
  tokenIdToHodl: HexString;
  amountHodl: bigint;
  tokenIdToVote: HexString;
  amount: bigint;
  side: bigint;
}>(
  Script.fromJson(BidMultipleChoiceScriptJson, "", AllStructs),
  getContractByCodeHash
);

export const BoostBet = new ExecutableScript<{
  predict: HexString;
  amount: bigint;
}>(Script.fromJson(BoostBetScriptJson, "", AllStructs), getContractByCodeHash);

export const ClaimMultipleChoice = new ExecutableScript<{
  predict: HexString;
  addressToClaim: Address;
}>(
  Script.fromJson(ClaimMultipleChoiceScriptJson, "", AllStructs),
  getContractByCodeHash
);

export const DeployNewBet = new ExecutableScript<{
  deploy: HexString;
  title: HexString;
  choicesName: [
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString,
    HexString
  ];
  endTimestamp: bigint;
  claimedByAnyoneTimestamp: bigint;
  endBeforeEnd: boolean;
  tokenIdToVote: HexString;
  tokenIdToHodl: HexString;
  amountToHodl: bigint;
}>(
  Script.fromJson(DeployNewBetScriptJson, "", AllStructs),
  getContractByCodeHash
);

export const DestroyBet = new ExecutableScript<{ bet: HexString }>(
  Script.fromJson(DestroyBetScriptJson, "", AllStructs),
  getContractByCodeHash
);

export const EndBet = new ExecutableScript<{ bet: HexString; sideWon: bigint }>(
  Script.fromJson(EndBetScriptJson, "", AllStructs),
  getContractByCodeHash
);
