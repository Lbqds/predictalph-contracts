/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as PunterChoiceContractJson } from "../multiple-choice/PunterChoice.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace PunterChoiceTypes {
  export type Fields = {
    predictionContractId: HexString;
    punterAddress: Address;
    side: bigint;
    amountBid: bigint;
    claimedByAnyoneAt: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getBid: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAmountBid: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getClaimedByAnyone: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    destroy: {
      params: CallContractParams<{ from: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> =
    Callss["length"] extends 1
      ? MultiCallResults<Callss[0]>
      : { [index in keyof Callss]: MultiCallResults<Callss[index]> };

  export interface SignExecuteMethodTable {
    getAddress: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getBid: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAmountBid: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getClaimedByAnyone: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    destroy: {
      params: SignExecuteContractMethodParams<{ from: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PunterChoiceInstance,
  PunterChoiceTypes.Fields
> {
  encodeFields(fields: PunterChoiceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = { ErrorCodes: { InvalidCaller: BigInt("200") } };

  at(address: string): PunterChoiceInstance {
    return new PunterChoiceInstance(address);
  }

  tests = {
    getAddress: async (
      params: Omit<
        TestContractParamsWithoutMaps<PunterChoiceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getAddress", params, getContractByCodeHash);
    },
    getBid: async (
      params: Omit<
        TestContractParamsWithoutMaps<PunterChoiceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getBid", params, getContractByCodeHash);
    },
    getAmountBid: async (
      params: Omit<
        TestContractParamsWithoutMaps<PunterChoiceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getAmountBid", params, getContractByCodeHash);
    },
    getClaimedByAnyone: async (
      params: Omit<
        TestContractParamsWithoutMaps<PunterChoiceTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getClaimedByAnyone",
        params,
        getContractByCodeHash
      );
    },
    destroy: async (
      params: TestContractParamsWithoutMaps<
        PunterChoiceTypes.Fields,
        { from: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroy", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const PunterChoice = new Factory(
  Contract.fromJson(
    PunterChoiceContractJson,
    "",
    "8e136164cc165fab36e544f81ac788822b6a33aad1c259a700b203931d69ac26",
    []
  )
);

// Use this class to interact with the blockchain
export class PunterChoiceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PunterChoiceTypes.State> {
    return fetchContractState(PunterChoice, this);
  }

  view = {
    getAddress: async (
      params?: PunterChoiceTypes.CallMethodParams<"getAddress">
    ): Promise<PunterChoiceTypes.CallMethodResult<"getAddress">> => {
      return callMethod(
        PunterChoice,
        this,
        "getAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getBid: async (
      params?: PunterChoiceTypes.CallMethodParams<"getBid">
    ): Promise<PunterChoiceTypes.CallMethodResult<"getBid">> => {
      return callMethod(
        PunterChoice,
        this,
        "getBid",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAmountBid: async (
      params?: PunterChoiceTypes.CallMethodParams<"getAmountBid">
    ): Promise<PunterChoiceTypes.CallMethodResult<"getAmountBid">> => {
      return callMethod(
        PunterChoice,
        this,
        "getAmountBid",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getClaimedByAnyone: async (
      params?: PunterChoiceTypes.CallMethodParams<"getClaimedByAnyone">
    ): Promise<PunterChoiceTypes.CallMethodResult<"getClaimedByAnyone">> => {
      return callMethod(
        PunterChoice,
        this,
        "getClaimedByAnyone",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    destroy: async (
      params: PunterChoiceTypes.CallMethodParams<"destroy">
    ): Promise<PunterChoiceTypes.CallMethodResult<"destroy">> => {
      return callMethod(
        PunterChoice,
        this,
        "destroy",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getAddress: async (
      params: PunterChoiceTypes.SignExecuteMethodParams<"getAddress">
    ): Promise<PunterChoiceTypes.SignExecuteMethodResult<"getAddress">> => {
      return signExecuteMethod(PunterChoice, this, "getAddress", params);
    },
    getBid: async (
      params: PunterChoiceTypes.SignExecuteMethodParams<"getBid">
    ): Promise<PunterChoiceTypes.SignExecuteMethodResult<"getBid">> => {
      return signExecuteMethod(PunterChoice, this, "getBid", params);
    },
    getAmountBid: async (
      params: PunterChoiceTypes.SignExecuteMethodParams<"getAmountBid">
    ): Promise<PunterChoiceTypes.SignExecuteMethodResult<"getAmountBid">> => {
      return signExecuteMethod(PunterChoice, this, "getAmountBid", params);
    },
    getClaimedByAnyone: async (
      params: PunterChoiceTypes.SignExecuteMethodParams<"getClaimedByAnyone">
    ): Promise<
      PunterChoiceTypes.SignExecuteMethodResult<"getClaimedByAnyone">
    > => {
      return signExecuteMethod(
        PunterChoice,
        this,
        "getClaimedByAnyone",
        params
      );
    },
    destroy: async (
      params: PunterChoiceTypes.SignExecuteMethodParams<"destroy">
    ): Promise<PunterChoiceTypes.SignExecuteMethodResult<"destroy">> => {
      return signExecuteMethod(PunterChoice, this, "destroy", params);
    },
  };

  async multicall<Callss extends PunterChoiceTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<PunterChoiceTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      PunterChoice,
      this,
      callss,
      getContractByCodeHash
    )) as PunterChoiceTypes.MulticallReturnType<Callss>;
  }
}
