"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PunterInstance = exports.Punter = void 0;
const web3_1 = require("@alephium/web3");
const Punter_ral_json_1 = __importDefault(require("../Punter.ral.json"));
const contracts_1 = require("./contracts");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.consts = { ErrorCodes: { InvalidCaller: BigInt(200) } };
        this.tests = {
            getAddress: async (params) => {
                return (0, web3_1.testMethod)(this, "getAddress", params);
            },
            getBid: async (params) => {
                return (0, web3_1.testMethod)(this, "getBid", params);
            },
            getAmountBid: async (params) => {
                return (0, web3_1.testMethod)(this, "getAmountBid", params);
            },
            getRoundEpoch: async (params) => {
                return (0, web3_1.testMethod)(this, "getRoundEpoch", params);
            },
            destroy: async (params) => {
                return (0, web3_1.testMethod)(this, "destroy", params);
            },
        };
    }
    getInitialFieldsWithDefaultValues() {
        return this.contract.getInitialFieldsWithDefaultValues();
    }
    at(address) {
        return new PunterInstance(address);
    }
}
// Use this object to test and deploy the contract
exports.Punter = new Factory(web3_1.Contract.fromJson(Punter_ral_json_1.default, "", "34e58c5baf543d031205cc37b1a041428a5d14c253aa6b6b65fffe1e03bd10dd"));
// Use this class to interact with the blockchain
class PunterInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.methods = {
            getAddress: async (params) => {
                return (0, web3_1.callMethod)(exports.Punter, this, "getAddress", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getBid: async (params) => {
                return (0, web3_1.callMethod)(exports.Punter, this, "getBid", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getAmountBid: async (params) => {
                return (0, web3_1.callMethod)(exports.Punter, this, "getAmountBid", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getRoundEpoch: async (params) => {
                return (0, web3_1.callMethod)(exports.Punter, this, "getRoundEpoch", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Punter, this);
    }
    async multicall(calls) {
        return (await (0, web3_1.multicallMethods)(exports.Punter, this, calls, contracts_1.getContractByCodeHash));
    }
}
exports.PunterInstance = PunterInstance;
