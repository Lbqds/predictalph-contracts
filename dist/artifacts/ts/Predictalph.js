"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PredictalphInstance = exports.Predictalph = void 0;
const web3_1 = require("@alephium/web3");
const Predictalph_ral_json_1 = __importDefault(require("../Predictalph.ral.json"));
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.eventIndex = {
            BetBull: 0,
            BetBear: 1,
            RoundEnded: 2,
            RoundStarted: 3,
            Claimed: 4,
        };
        this.consts = {
            ErrorCodes: {
                PunterNotExists: BigInt(1),
                InvalidPunterAddress: BigInt(2),
                InvalidCaller: BigInt(3),
                BidTimestampReached: BigInt(4),
                RoundAlreadyRunning: BigInt(5),
                RoundDidntEnd: BigInt(6),
                RoundNotExists: BigInt(7),
                AlreadyPlayed: BigInt(8),
                NotEnoughAlph: BigInt(9),
            },
        };
        this.tests = {
            getRound: async (params) => {
                return (0, web3_1.testMethod)(this, "getRound", params);
            },
            getRoundByEpoch: async (params) => {
                return (0, web3_1.testMethod)(this, "getRoundByEpoch", params);
            },
            getBetInfoByEpoch: async (params) => {
                return (0, web3_1.testMethod)(this, "getBetInfoByEpoch", params);
            },
            startRound: async (params) => {
                return (0, web3_1.testMethod)(this, "startRound", params);
            },
            endRound: async (params) => {
                return (0, web3_1.testMethod)(this, "endRound", params);
            },
            bid: async (params) => {
                return (0, web3_1.testMethod)(this, "bid", params);
            },
            withdraw: async (params) => {
                return (0, web3_1.testMethod)(this, "withdraw", params);
            },
            setNewRepeatEvery: async (params) => {
                return (0, web3_1.testMethod)(this, "setNewRepeatEvery", params);
            },
            destroyRound: async (params) => {
                return (0, web3_1.testMethod)(this, "destroyRound", params);
            },
            setNewFees: async (params) => {
                return (0, web3_1.testMethod)(this, "setNewFees", params);
            },
            setNewOperator: async (params) => {
                return (0, web3_1.testMethod)(this, "setNewOperator", params);
            },
        };
    }
    getInitialFieldsWithDefaultValues() {
        return this.contract.getInitialFieldsWithDefaultValues();
    }
    at(address) {
        return new PredictalphInstance(address);
    }
}
// Use this object to test and deploy the contract
exports.Predictalph = new Factory(web3_1.Contract.fromJson(Predictalph_ral_json_1.default, "=4-2=6+61=1+07=2+12=1-2=1-2+1=1+8=1-3+202=2-2+a6=2+b6=2-3=1+3=1-3+313=1+3=1-2+3=11-1+e=24+7e0212526f756e6420636f6e747261637420696420001600=25-1+d=22+7e0212526f756e6420636f6e747261637420696420001601=81-1+c=52+16027e0212526f756e6420636f6e74726163742069642000a00016007e031041637475616c2065706f6368206973201220776974682073746172742070726963652000=1158", "2a48ca28abf4ddc54f2c7fa85ae957b2a547c4a0ef934cb092e55da8294965f4"));
// Use this class to interact with the blockchain
class PredictalphInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Predictalph, this);
    }
    async getContractEventsCurrentCount() {
        return (0, web3_1.getContractEventsCurrentCount)(this.address);
    }
    subscribeBetBullEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Predictalph.contract, this, options, "BetBull", fromCount);
    }
    subscribeBetBearEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Predictalph.contract, this, options, "BetBear", fromCount);
    }
    subscribeRoundEndedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Predictalph.contract, this, options, "RoundEnded", fromCount);
    }
    subscribeRoundStartedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Predictalph.contract, this, options, "RoundStarted", fromCount);
    }
    subscribeClaimedEvent(options, fromCount) {
        return (0, web3_1.subscribeContractEvent)(exports.Predictalph.contract, this, options, "Claimed", fromCount);
    }
    subscribeAllEvents(options, fromCount) {
        return (0, web3_1.subscribeContractEvents)(exports.Predictalph.contract, this, options, fromCount);
    }
}
exports.PredictalphInstance = PredictalphInstance;
