"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoundInstance = exports.Round = void 0;
const web3_1 = require("@alephium/web3");
const Round_ral_json_1 = __importDefault(require("../Round.ral.json"));
const contracts_1 = require("./contracts");
class Factory extends web3_1.ContractFactory {
    constructor() {
        super(...arguments);
        this.consts = {
            ErrorCodes: {
                InvalidCaller: BigInt(100),
                NotAllPlayerClaimed: BigInt(101),
                RewardsAlreadyComputed: BigInt(103),
                BidTimestampNotReached: BigInt(104),
                RewardsNotComputed: BigInt(105),
            },
        };
        this.tests = {
            getEndRoundTime: async (params) => {
                return (0, web3_1.testMethod)(this, "getEndRoundTime", params);
            },
            getRewardAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "getRewardAmount", params);
            },
            getRewardBaseCalAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "getRewardBaseCalAmount", params);
            },
            getRoundEpoch: async (params) => {
                return (0, web3_1.testMethod)(this, "getRoundEpoch", params);
            },
            updateAmount: async (params) => {
                return (0, web3_1.testMethod)(this, "updateAmount", params);
            },
            calculateRewards: async (params) => {
                return (0, web3_1.testMethod)(this, "calculateRewards", params);
            },
            destroy: async (params) => {
                return (0, web3_1.testMethod)(this, "destroy", params);
            },
            userClaimRewards: async (params) => {
                return (0, web3_1.testMethod)(this, "userClaimRewards", params);
            },
        };
    }
    getInitialFieldsWithDefaultValues() {
        return this.contract.getInitialFieldsWithDefaultValues();
    }
    at(address) {
        return new RoundInstance(address);
    }
}
// Use this object to test and deploy the contract
exports.Round = new Factory(web3_1.Contract.fromJson(Round_ral_json_1.default, "", "cb6a6ac7ef510bb90eb4fd5cdb394c8d60d808368a5ebc11944963dda4f69f56"));
// Use this class to interact with the blockchain
class RoundInstance extends web3_1.ContractInstance {
    constructor(address) {
        super(address);
        this.methods = {
            getEndRoundTime: async (params) => {
                return (0, web3_1.callMethod)(exports.Round, this, "getEndRoundTime", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getRewardAmount: async (params) => {
                return (0, web3_1.callMethod)(exports.Round, this, "getRewardAmount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getRewardBaseCalAmount: async (params) => {
                return (0, web3_1.callMethod)(exports.Round, this, "getRewardBaseCalAmount", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
            getRoundEpoch: async (params) => {
                return (0, web3_1.callMethod)(exports.Round, this, "getRoundEpoch", params === undefined ? {} : params, contracts_1.getContractByCodeHash);
            },
        };
    }
    async fetchState() {
        return (0, web3_1.fetchContractState)(exports.Round, this);
    }
    async multicall(calls) {
        return (await (0, web3_1.multicallMethods)(exports.Round, this, calls, contracts_1.getContractByCodeHash));
    }
}
exports.RoundInstance = RoundInstance;
